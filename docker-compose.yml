version: '3.8'

volumes:
    travel-agent-redis-data:
        driver: local
    travel-agent-postgres-data:
        driver: local

networks:
    travel-agent-network:
        driver: bridge

services:
    # Redis for caching and session storage
    redis:
        image: redis:7-alpine
        container_name: travel-agent-redis
        restart: unless-stopped
        volumes:
            - travel-agent-redis-data:/data
        networks:
            - travel-agent-network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s

    # PostgreSQL for persistent storage
    postgres:
        image: postgres:15-alpine
        container_name: travel-agent-postgres
        restart: unless-stopped
        environment:
            POSTGRES_DB: travel_agent
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
        volumes:
            - travel-agent-postgres-data:/var/lib/postgresql/data
        networks:
            - travel-agent-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d travel_agent"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s

    # Main Travel Agent API
    travel-agent:
        build: 
            context: .
            dockerfile: Dockerfile
        container_name: travel-agent-api
        restart: unless-stopped
        ports:
            - "8000:8000"
        env_file:
            - .env
        environment:
            # Database connections
            REDIS_URI: redis://redis:6379
            POSTGRES_URI: postgres://postgres:postgres@postgres:5432/travel_agent
            # Application settings
            FASTAPI_HOST: 0.0.0.0
            FASTAPI_PORT: 8000
            ENVIRONMENT: production
        depends_on:
            redis:
                condition: service_healthy
            postgres:
                condition: service_healthy
        networks:
            - travel-agent-network
        volumes:
            - ./logs:/app/logs:rw
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s

    # Optional: Nginx reverse proxy for production
    nginx:
        image: nginx:alpine
        container_name: travel-agent-nginx
        restart: unless-stopped
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - travel-agent
        networks:
            - travel-agent-network
        profiles:
            - production
