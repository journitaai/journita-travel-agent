name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:  # allows manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REPO_NAME: agent-service
      SERVICE_NAME: agent-service
      CLUSTER_NAME: journita-staging-cluster
      TASK_FAMILY: staging-agent-service
      PYTHON_TEST_DIR: ./tests

    steps:
      # Step 1 – Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2 – Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Step 3 – Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest -r requirements.txt

      # Step 4 – Run tests
      - name: Run tests
        run: pytest $PYTHON_TEST_DIR

      # Step 5 – Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 6 – Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 7 – Extract version tag
      - name: Get version tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "0.0.1")
          BUILD_ID=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=${VERSION}-${BUILD_ID}" >> $GITHUB_ENV

      # Step 8 – Build, tag, and push Docker image
      - name: Build, tag, and push image
        run: |
          ECR_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}"
          docker build -t $ECR_URI:${IMAGE_TAG} .
          docker tag $ECR_URI:${IMAGE_TAG} $ECR_URI:latest
          docker push $ECR_URI:${IMAGE_TAG}
          docker push $ECR_URI:latest

      # Step 9 – Register new ECS task definition
      - name: Register ECS task definition
        run: |
          ECR_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}"
          cat <<EOF > taskdef.json
          {
            "family": "${{ env.TASK_FAMILY }}",
            "containerDefinitions": [
              {
                "name": "${{ env.SERVICE_NAME }}",
                "image": "$ECR_URI:${IMAGE_TAG}",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  {
                    "containerPort": 8000,
                    "hostPort": 8000
                  }
                ]
              }
            ]
          }
          EOF

          aws ecs register-task-definition \
            --cli-input-json file://taskdef.json

      # Step 10 – Deploy ECS service
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --force-new-deployment
